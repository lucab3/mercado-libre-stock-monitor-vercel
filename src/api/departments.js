/**
 * API endpoint para gesti√≥n de configuraci√≥n de departamentos
 * Permite crear botones personalizados que filtran por m√∫ltiples categor√≠as
 */

const { withAuth } = require('../middleware/serverlessAuth');
const logger = require('../utils/logger');

// Almacenamiento temporal en memoria (en producci√≥n ser√≠a en base de datos)
const departmentStorage = new Map();

/**
 * Obtener configuraci√≥n de departamentos del usuario
 */
async function getDepartments(req, res) {
  try {
    const userId = req.auth.userId;
    
    logger.info(`üìÅ Obteniendo configuraci√≥n de departamentos para usuario: ${userId}`);
    
    // Obtener configuraci√≥n del usuario (por ahora desde memoria, despu√©s desde BD)
    const userDepartments = departmentStorage.get(userId) || [];
    
    logger.info(`üìÅ Encontrados ${userDepartments.length} departamentos configurados`);
    
    res.json({
      success: true,
      departments: userDepartments,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error(`‚ùå Error obteniendo departamentos: ${error.message}`);
    res.status(500).json({
      success: false,
      error: 'Error obteniendo configuraci√≥n de departamentos',
      message: error.message
    });
  }
}

/**
 * Guardar configuraci√≥n de departamentos del usuario
 */
async function saveDepartments(req, res) {
  try {
    const userId = req.auth.userId;
    const { departments: rawDepartments } = req.body;
    
    // Validaci√≥n de seguridad para departments
    if (!Array.isArray(rawDepartments)) {
      logger.warn(`üö® departments no es array desde IP: ${req.ip}`);
      return res.status(400).json({
        success: false,
        error: 'Formato inv√°lido',
        message: 'departments debe ser un array'
      });
    }
    
    // Validar l√≠mite de departamentos para prevenir DoS
    if (rawDepartments.length > 50) {
      logger.warn(`üö® Demasiados departamentos (${rawDepartments.length}) desde IP: ${req.ip}`);
      return res.status(400).json({
        success: false,
        error: 'L√≠mite excedido',
        message: 'M√°ximo 50 departamentos permitidos'
      });
    }
    
    // Validar y sanitizar cada departamento
    const departments = [];
    for (let i = 0; i < rawDepartments.length; i++) {
      const dept = rawDepartments[i];
      
      // Validar estructura b√°sica
      if (!dept || typeof dept !== 'object') {
        logger.warn(`üö® Departamento ${i} no es objeto desde IP: ${req.ip}`);
        return res.status(400).json({
          success: false,
          error: 'Estructura de departamento inv√°lida',
          message: `Departamento ${i} debe ser un objeto`
        });
      }
      
      // Validar y sanitizar campos
      const id = typeof dept.id === 'string' ? dept.id.slice(0, 50).replace(/[<>\"']/g, '') : null;
      const name = typeof dept.name === 'string' ? dept.name.slice(0, 100).replace(/[<>\"']/g, '') : null;
      
      if (!id || !name) {
        logger.warn(`üö® Departamento ${i} campos faltantes desde IP: ${req.ip}`);
        return res.status(400).json({
          success: false,
          error: 'Estructura de departamento inv√°lida',
          message: `Departamento ${i} debe tener id y name v√°lidos`
        });
      }
      
      // Validar categor√≠as
      if (!Array.isArray(dept.categories)) {
        logger.warn(`üö® Departamento ${i} categories no es array desde IP: ${req.ip}`);
        return res.status(400).json({
          success: false,
          error: 'Estructura de departamento inv√°lida',
          message: `Departamento ${i} categories debe ser un array`
        });
      }
      
      // Validar l√≠mite de categor√≠as
      if (dept.categories.length > 100) {
        logger.warn(`üö® Departamento ${i} demasiadas categor√≠as (${dept.categories.length}) desde IP: ${req.ip}`);
        return res.status(400).json({
          success: false,
          error: 'L√≠mite excedido',
          message: `Departamento ${i} m√°ximo 100 categor√≠as permitidas`
        });
      }
      
      // Validar y sanitizar categor√≠as
      const categories = [];
      for (let j = 0; j < dept.categories.length; j++) {
        const cat = dept.categories[j];
        if (!cat || typeof cat !== 'object') {
          logger.warn(`üö® Categor√≠a ${j} en departamento ${i} inv√°lida desde IP: ${req.ip}`);
          continue; // Skip categor√≠a inv√°lida
        }
        
        const catId = typeof cat.id === 'string' ? cat.id.slice(0, 50).replace(/[<>\"']/g, '') : null;
        const catName = typeof cat.name === 'string' ? cat.name.slice(0, 200).replace(/[<>\"']/g, '') : null;
        
        if (catId && catName) {
          categories.push({ id: catId, name: catName });
        }
      }
      
      departments.push({
        id,
        name,
        categories
      });
    }
    
    logger.info(`üíæ Guardando ${departments.length} departamentos para usuario: ${userId}`);
    
    // Guardar en memoria (por ahora)
    departmentStorage.set(userId, departments);
    
    // Log de los departamentos guardados
    departments.forEach(dept => {
      logger.info(`  üìÅ ${dept.name}: ${dept.categories.length} categor√≠as [${dept.categories.map(c => c.name).join(', ')}]`);
    });
    
    res.json({
      success: true,
      message: 'Configuraci√≥n de departamentos guardada correctamente',
      departments: departments,
      timestamp: new Date().toISOString()
    });

  } catch (error) {
    logger.error(`‚ùå Error guardando departamentos: ${error.message}`);
    res.status(500).json({
      success: false,
      error: 'Error guardando configuraci√≥n de departamentos',
      message: error.message
    });
  }
}

/**
 * Manejador principal de rutas
 */
async function handleDepartments(req, res) {
  const { method } = req;
  
  switch (method) {
    case 'GET':
      return await getDepartments(req, res);
    
    case 'POST':
      return await saveDepartments(req, res);
    
    default:
      return res.status(405).json({
        success: false,
        error: 'M√©todo no permitido',
        allowedMethods: ['GET', 'POST']
      });
  }
}

// Export con middleware de autenticaci√≥n
module.exports = withAuth(handleDepartments);